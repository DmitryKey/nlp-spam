#! /usr/bin/env ruby
#
# Serialize HTML file as Sample objects.
#

require 'fileutils'
require 'pathname'
require 'parallel'
require_relative '../lib/sample'

# Load training data into an array
def load_dir(dir, klass)
  files = Dir[File.join(dir, '*.html')]
  out = []

  Parallel.map(files, :in_threads => 200) do |f|
    body = File.read(f)
    out << Sample.new(body, klass, f)
  end

  out
end

if $0 == __FILE__
  abort "Usage: #{File.basename(__FILE__)} HTML_DIR OBJ_DIR" unless ARGV.size == 2
  html_dir = Pathname(File.expand_path(ARGV.shift))
  obj_dir  = File.expand_path(ARGV.shift)
  FileUtils.mkdir_p obj_dir
  obj_dir = Pathname(obj_dir)

  %w(testing training).each do |type|
    [:ham, :spam].each do |klass|
      dir = html_dir.join(type, klass.to_s)
      samples = load_dir(dir, klass)

      fork do
        File.open(obj_dir + "#{type}.obj", 'w') { |f| f.puts Marshal.dump(samples) }
      end
    end
  end
end
